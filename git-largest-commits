#!/usr/bin/env uv run --script
# /// script
# requires-python = ">=3.13"
# ///
"""
List Git commits reachable from the current commit, sorted by the number of
changes they made, largest first.

https://adamj.eu/tech/2025/07/20/git-find-largest-commits/
"""

import math
import os
import re
import subprocess
import sys


def main():
    result = subprocess.run(
        ["git", "log", "--pretty=format:%H\t%s", "--shortstat", "--no-merges"],
        capture_output=True,
        text=True,
        check=True,
    )
    if result.returncode != 0:
        print(result.stdout)
        print(result.stderr, file=sys.stderr)
        return result.returncode

    commit_details = []
    lines = result.stdout.splitlines()
    i = 0
    while i < len(lines):
        commit_line = lines[i]
        if i + 1 < len(lines) and lines[i + 1].startswith(" "):
            stats_line = lines[i + 1]
            i += 3  # move past commit, stats, and blank lines
        else:
            # Empty commit
            stats_line = ""
            i += 1  # move past commit line only

        total_changes = 0
        if stats_line:
            matches = re.findall(r"(\d+) (?:insertion|deletion)", stats_line)
            total_changes = sum(int(match) for match in matches)
        commit_details.append((total_changes, commit_line))

    if not commit_details:
        print("No commits found.", file=sys.stderr)
        return 1

    commit_details.sort(key=lambda x: x[0], reverse=True)

    # Calculate width based on largest number of changes
    max_changes = commit_details[0][0]
    if max_changes == 0:
        width = 7  # "Changes"
    else:
        num_digits = len(str(max_changes))
        width = math.ceil(num_digits / 3) * 3

    sha_width = len(commit_details[0][1].split("\t")[0])

    # Format and output
    try:
        print(f"{'Changes':<{width}}\t{'SHA':<{sha_width}}\tSubject")
        for changes, commit in commit_details:
            print(f"{changes:{width}d}\t{commit}")
        sys.stdout.flush()
    except BrokenPipeError:
        # Python flushes standard streams on exit; redirect remaining output
        # to devnull to avoid another BrokenPipeError at shutdown
        devnull = os.open(os.devnull, os.O_WRONLY)
        os.dup2(devnull, sys.stdout.fileno())

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
