#!/usr/bin/env python
"""
git pull --prune then delete any branches that exist locally and were deleted
from remote.
"""
import subprocess
import sys


def main():
    current_branch = subprocess.run(
        ["git", "rev-parse", "--abbrev-ref", "HEAD"], capture_output=True
    ).stdout.strip()

    main_proc = subprocess.run(
        ["git", "rev-parse", "--quiet", "--verify", "main"], capture_output=True
    )
    if main_proc.returncode == 0:
        default_branch = "main"
    else:
        default_branch = "master"

    if current_branch != default_branch:
        changes_proc = subprocess.run(
            ["git", "diff", "--exit-code"], capture_output=True
        )
        if changes_proc.returncode == 0:
            subprocess.run(["git", "switch", default_branch])

    result = subprocess.run(["git", "pull", "--prune"], capture_output=True)

    stdout = result.stdout.decode()
    stderr = result.stderr.decode()
    print(stdout, end="", file=sys.stdout)
    print(stderr, end="", file=sys.stderr)

    if result.returncode != 0:
        sys.exit(result.returncode)

    deleted_branches = [
        line.split("/", 1)[1]
        for line in stderr.splitlines()
        if line.startswith(" - [deleted]")
    ]
    for branch in deleted_branches:
        check_proc = subprocess.run(
            ["git", "show-ref", "--quiet", "--verify", "--", f"refs/heads/{branch}"]
        )
        if check_proc.returncode == 0:
            subprocess.run(["git", "branch", "-D", branch])


if __name__ == "__main__":
    main()
